
// Define the number of the Shephard-Todd group
// g:=33;
G:=ShephardTodd(g);
d:=Rank(G);

load "Complements.m";

function MaxPS(g)
PN:=parabolicNames[g];
n:=#PN;
pn:=PN;
for i:=1 to n-1 do
Pi:=paraData(g,PN[i]);
for j:=i+1 to n do
Pj:=paraData(g,PN[j]);
if Pi meet Pj eq Pi then Exclude(~pn,PN[i]);
elif Pi meet Pj eq Pj then Exclude(~pn,PN[j]);
end if;
end for;
end for;
return pn;
end function;

function linesi(g,i)
MPS:=MaxPS(g);
P,Q,H,N,roots,rho,J,Xi,G:=paraData(g,MPS[i]);
a:=&meet[Eigenspace(gen,1):gen in P].1;
T:=RightTransversal(G,P);
v:=[a^g:g in T];
V:=Parent(v[1]); subs:={@ @}; vecs:=[ ];
for j:=1 to #v do
S:=sub<V|v[j]>;
if S notin subs then
Include(~subs,S);Append(~vecs,v[j]);
end if;
end for;
return vecs;
end function;

// Find the maximal (parabolic) subgroups
MPS:=MaxPS(g);

// Find the line systems
nls:=#MPS;
X:=[];
for j in [1..nls] do
   P,Q,H,N,roots,rho,J,Xi,G:=paraData(g,MPS[j]);
   Append(~X,linesi(g,j)); 
end for;

HermTranspose := function(B)
T:=Transpose(B);
T:=Parent(T)![ComplexConjugate(z):z in Eltseq(T)];
return T;
end function;

// For a Shephard-Todd group, make the matrix A needed to give the
// inner product for which the representation is unitary.
// Note here we deal with Hermitian transpose of the group, since
// magma multiplies vectors on the right
function MakeA(G)
  R:=MatrixRing(BaseRing(G),Rank(G));
  sm:=0*R!Random(G);
  for g in G do
    sm:=sm+R!(g*HermTranspose(g));
  end for;
  return 1/Order(G)*sm;
end function;

A:=MakeA(G);

function inp(a,b)
innerp:=&+[a[i]*ComplexConjugate(b[i]):i in [1..Ncols(a)]];
return(innerp);
end function;

function inpA(a,b)
  return inp(a*A,b);
end function;

function partdoubsum(X,Y,p,q)
  sm:=0;
  for j in [1..#X] do for k in [1..#Y] do
    sm:=sm+inpA(X[j],Y[k])^p*inpA(Y[k],X[j])^q/(inpA(X[j],X[j])*inpA(Y[k],Y[k]))^(Integers()!((p+q)/2));
  end for; end for;
  return sm;
end function;

function anglespartdoubsum(X,Y)
  sm:=0;
  for j in [1..#X] do for k in [1..#Y] do
    sm:=sm+inpA(X[j],Y[k])^p*inpA(Y[k],X[j])^q/(inpA(X[j],X[j])*inpA(Y[k],Y[k]))^(Integers()!((p+q)/2));
  end for; end for;
  return {* inpA(X[j],Y[k])*inpA(Y[k],X[j])/(inpA(X[j],X[j])*inpA(Y[k],Y[k])) : j in [1..#X] , k in [1..#Y] *};
end function;

//function partdoubsum(X,Y,p,q)
function partdoubsumII(X,Y,t)
  sm:=0;
  t:=p;
  angs:=anglespartdoubsum(X,Y);
  for a in MultisetToSet(angs) do  
    sm:=sm+Multiplicity(angs,a)*(a^t); 
  end for;
  return sm;
end function;

function bpq(p,q,d)
  if p ne q
    then return 0;
    else return 1/Binomial(p+d-1,d-1);
  end if;
end function;

function bt(t,d)
  pd:=1;
  for j in [1..t] do
    pd:=pd*(2*j-1)/(d+2*(j-1));
  end for;
  return pd;
end function;

// Find the line pairs
lp:=[];
for j in [1..#X] do
 for k in [j+1..#X] do
   Append(~lp,[#X[j]+#X[k],j,k]);
 end for;
end for;
Sort(~lp);






